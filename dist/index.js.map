{"version":3,"sources":["app.js","index.js"],"names":["http","require","fs","path","mimeTypes","app","createServer","request","response","filePath","join","__dirname","url","extname","String","toLowerCase","contentType","readFile","error","content","writeHead","end","code","module","exports","port","listen","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,SAAS,GAAG;EAChB,OAAO,EAAE,WAAW;EACpB,KAAK,EAAE,iBAAiB;EACxB,MAAM,EAAE,UAAU;EAClB,OAAO,EAAE,kBAAkB;EAC3B,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,WAAW;EACnB,MAAM,EAAE,WAAW;EACnB,OAAO,EAAE,uBAAuB;EAChC,MAAM,EAAE,sBAAsB;EAC9B,MAAM,EAAE,+BAA+B;EACvC,MAAM,EAAE,sBAAsB;EAC9B,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,GAAG,GAAGL,IAAI,CAACM,YAAY,CAAC,CAACC,OAAO,EAAEC,QAAQ,KAAK;EACnD,IAAIC,QAAQ,GAAGN,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,QAAQ,EAAEJ,OAAO,CAACK,GAAG,CAAC;EAC1D,IAAIH,QAAQ,KAAKN,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,QAAQ,EAAE,GAAG,CAAC,EAAEF,QAAQ,GAAGN,IAAI,CAACO,IAAI,CAACC,SAAS,EAAE,QAAQ,EAAE,YAAY,CAAC;EAE7G,MAAME,OAAO,GAAGC,MAAM,CAACX,IAAI,CAACU,OAAO,CAACJ,QAAQ,CAAC,CAAC,CAACM,WAAW,EAAE;EAC5D,MAAMC,WAAW,GAAGZ,SAAS,CAACS,OAAO,CAAC,IAAI,0BAA0B;EAEpEX,EAAE,CAACe,QAAQ,CAACR,QAAQ,EAAE,CAACS,KAAK,EAAEC,OAAO,KAAK;IACxC,IAAID,KAAK,EAAE;MACTV,QAAQ,CAACY,SAAS,CAAC,GAAG,CAAC;MACvBZ,QAAQ,CAACa,GAAG,CAAE,+CAA8CH,KAAK,CAACI,IAAK,OAAM,CAAC;MAC9Ed,QAAQ,CAACa,GAAG,EAAE;IAChB,CAAC,MAAM;MACLb,QAAQ,CAACY,SAAS,CAAC,GAAG,EAAE;QAAE,cAAc,EAAEJ;MAAY,CAAC,CAAC;MACxDR,QAAQ,CAACa,GAAG,CAACF,OAAO,EAAE,OAAO,CAAC;IAChC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFI,MAAM,CAACC,OAAO,GAAGnB,GAAG;;ACxCpB,MAAMA,GAAG,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAE5B,MAAMwB,IAAI,GAAG,MAAM;AAEnBpB,GAAG,CAACqB,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBE,OAAO,CAACC,GAAG,CAAE,+BAA8BH,IAAK,KAAI,CAAC;AACvD,CAAC,CAAC","file":"index.js","sourceRoot":"..\\src","sourcesContent":["const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nconst mimeTypes = {\n  '.html': 'text/html',\n  '.js': 'text/javascript',\n  '.css': 'text/css',\n  '.json': 'application/json',\n  '.png': 'image/png',\n  '.jpg': 'image/jpg',\n  '.gif': 'image/gif',\n  '.wav': 'audio/wav',\n  '.mp4': 'video/mp4',\n  '.woff': 'application/font-woff',\n  '.ttf': 'application/font-ttf',\n  '.eot': 'application/vnd.ms-fontobject',\n  '.otf': 'application/font-otf',\n  '.svg': 'application/image/svg+xml',\n};\n\nconst app = http.createServer((request, response) => {\n  let filePath = path.join(__dirname, 'public', request.url);\n  if (filePath === path.join(__dirname, 'public', '/')) filePath = path.join(__dirname, 'public', 'index.html');\n\n  const extname = String(path.extname(filePath)).toLowerCase();\n  const contentType = mimeTypes[extname] || 'application/octet-stream';\n\n  fs.readFile(filePath, (error, content) => {\n    if (error) {\n      response.writeHead(500);\n      response.end(`Sorry, check with the site admin for error: ${error.code} ..\\n`);\n      response.end();\n    } else {\n      response.writeHead(200, { 'Content-Type': contentType });\n      response.end(content, 'utf-8');\n    }\n  });\n});\n\nmodule.exports = app;\n","const app = require('./app');\n\nconst port = '8888';\n\napp.listen(port, () => {\n  console.log(`Server is listening on port ${port}...`);\n});\n"]}